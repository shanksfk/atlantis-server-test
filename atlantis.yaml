version: 3

projects:
  - name: "infra"
    dir: "infra-local"
    workflow: "custom"



workflows:
  custom:
    plan:
      steps:
        - run: echo "Starting custom workflow"
        - run: |
            echo "Initializing Terraform..."
            terraform init
        - run: |
            echo "Cleaning up previous plan files..."
            rm -f tfplan.binary tfplan.json
        - run: |
            echo "Generating Terraform plan in JSON format..."
            terraform plan -out=tfplan.binary
            terraform show -json tfplan.binary > tfplan.json
        - run: |
            echo "Running OPA policy checks..."
            echo "## OPA Policy Check Results"
        
            # Run OPA and save output
            opa eval --format json --data policy.rego --input tfplan.json "data.terraform.analysis.violations" > opa_output.json
        
            # Parse OPA output and generate Markdown table
            echo "DEBUG: OPA Output Structure:"
            cat opa_output.json | jq .
        
            # Generate Markdown table with extracted violations
            echo "Generating Markdown table..."
            echo "| # | Violation Message |" > opa_table.md
            echo "|---|--------------------|" >> opa_table.md
        
            jq -r '.result[].expressions[].value[]' opa_output.json | awk '{print "| " NR " | " $0 " |"}' >> opa_table.md
        
            # Add Markdown table to a comment file
            echo -e "### 🚨 OPA Policy Violations Detected!\n" > comment.md
            cat opa_table.md >> comment.md
            echo -e "\n❌ **Fix these violations before applying Terraform!**" >> comment.md
        
            # Print the comment for debugging
            echo "Generated Comment:"
            cat comment.md

#        - run: |
#            echo "Extracting GitHub Repository Details..."
#
#            # Get the full remote URL without printing it
#            REPO_FULL_URL=$(git config --get remote.origin.url)
#
#            # Extract repo owner and name WITHOUT printing token
#            REPO_NAME=$(basename -s .git $(echo "$REPO_FULL_URL" | sed -E 's|.*github.com[:/](.*)|\1|' | cut -d'/' -f2))
#            REPO_OWNER=$(echo "$REPO_FULL_URL" | sed -E 's|.*github.com[:/]([^/]+)/.*|\1|')
#
#            # Hardcoded PR number for testing
#            PR_NUMBER=3
#
#            # Print extracted values without exposing URL
#            echo "✅ Repo Owner: $REPO_OWNER"
#            echo "✅ Repo Name: $REPO_NAME"
#            echo "✅ PR Number: $PR_NUMBER"
#
        - run: |
            echo "Posting a Custom Comment to GitHub..."

            # Read comment.md safely and escape special characters
            COMMENT_BODY=$(jq -Rs . < comment.md | tr -d '\r')

            # Debug: Print the escaped JSON payload before sending
            PAYLOAD="{\"body\": $COMMENT_BODY}"
            echo "Generated JSON Payload:"
            echo "$PAYLOAD" | jq 

            # Post the comment to the PR dynamically
            curl -s -X POST -H "Authorization: token $ATLANTIS_GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/shanksfk/atlantis-server-test/issues/3/comments" \
              -d "$PAYLOAD"
    apply:
      steps:
        - run: |
            echo "Cleaning up any existing plan files..."
            rm -f tfplan.binary tfplan.json
        - apply