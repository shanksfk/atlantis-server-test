version: 3

projects:
  - name: "infra"
    dir: "infra-local"
    workflow: "custom"

workflows:
  custom:
    plan:
      steps:
        - run: echo "Starting custom workflow"
        - run: git --version
        - run: |
            echo "Initializing Terraform..."
            terraform init
        - run: |
            echo "Cleaning up previous plan files..."
            rm -f tfplan.binary tfplan.json
        - run: |
            echo "Generating Terraform plan in JSON format..."
            terraform plan -out=tfplan.binary
            terraform show -json tfplan.binary > tfplan.json
        - run: |
            echo "Running OPA policy checks..."
            echo "## OPA Policy Check Results"

            # Run OPA and save output
            opa eval --format json --data policy.rego --input tfplan.json "data.terraform.analysis.violations" > opa_output.json

            echo "DEBUG: OPA Output Structure:"
            cat opa_output.json | jq .

            # Run OPA and save output
            opa eval --format json --data policy.rego --input tfplan.json "data.terraform.analysis.violations" > opa_output.json

            # Parse OPA output and generate Markdown table
            echo "DEBUG: OPA Output Structure:"
            cat opa_output.json

            # Generate Markdown table
            echo "Generating Markdown table..."
            jq -r '
              ["Resource", "Violation", "Message"] as $headers |
              [["---", "---", "---"]] as $separator |
              .result[].expressions[].value[]? | 
              [.resource, .violation, .message] as $row |
              [$headers, $separator, $row] | 
              .[] | @tsv
            ' opa_output.json | sed 's/\t/ | /g' > opa_table.md

            # Add Markdown table to a comment file
            echo -e "### OPA Policy Check Results\n" > comment.md
            cat opa_table.md >> comment.md

            # Print the comment for debugging
            echo "Generated Comment:"
            cat comment.md
        - run: |
            echo "Posting comment to GitHub PR..."
            PR_NUMBER=$(jq -r '.pull.number' <<< "$ATLANTIS_GITHUB_PAYLOAD")
            REPO_FULL_NAME=$(jq -r '.pull.base.repo.full_name' <<< "$ATLANTIS_GITHUB_PAYLOAD")

            # Read the comment content
            COMMENT_CONTENT=$(cat comment.md)

            # Post the comment using GitHub API
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$(jq -n --arg body "$COMMENT_CONTENT" '{"body": $body}')" \
              "https://api.github.com/repos/$REPO_FULL_NAME/issues/$PR_NUMBER/comments"

    apply:
      steps:
        - run: |
            echo "Cleaning up any existing plan files..."
            rm -f tfplan.binary tfplan.json
        - apply